
// NB: really, any PRNG needs testing against a collection of statistical tests like TestU01

'use strict';

// Math.pow(2, 32) === 4294967296
var TWO_TO_THIRTY_TWO = 4294967296;

const expect = require('chai').expect;

const Pseudo = require('../pseudo.js');

// The following were generated by ./xorshift128.cpp
const XOR_SHIFT_REFERENCE_SEED = new Uint32Array([ 123456789, 362436069, 521288629, 88675123 ]);
const XOR_SHIFT_REFERENCE_OUTPUT = [
            3701687786, 458299110, 2500872618, 3633119408, 516391518, 2377269574, 2599949379, 717229868, 137866584, 395339113,
            1301295572, 1728310821, 3538670320, 1187274473, 2316753268, 4061953237, 2129415220, 448488982, 643481932, 934407046, 
            723553448, 3932869644, 449460396, 2728332712, 2381680799, 830734233, 2059906653, 544153312, 20906778, 795757459, 
            1755102565, 811349640, 3380790346, 2498575418, 420990039, 3358478731, 391216208, 3936394860, 1299350043, 4150927415, 
            1799713142, 2247676300, 1547958642, 4203610453, 3120566707, 4181181390, 3137093107, 821167952, 2328167796, 3450572369, 
            2531467698, 915111097, 2496082361, 93322358, 2330895300, 3891095700, 1242220329, 807202386, 3474168598, 1127670696, 
            1595496296, 2292206759, 3677928846, 803679970, 3134234209, 815741160, 777332664, 953388206, 114179651, 3479117322, 
            1219528894, 3970092026, 2615790603, 2893102642, 1615373946, 2588888210, 1326662212, 1790338362, 1340630368, 2938346451, 
            2063068433, 2746337472, 2944301747, 472945036, 3647629438, 4105194587, 2823232412, 811811817, 3133207555, 3429148052, 
            1550834815, 1983488016, 3420725816, 574977749, 15456966, 3144270827, 1366737756, 1485628537, 116340804, 4083996137, 
            350717179, 729220402, 1411724544, 3245564400, 3919308153, 2052469741, 128353426, 1568676215, 1795592083, 2684620869, 
            2478150339, 3466816099, 2441485875, 293646974, 781981959, 4223246021, 1517252615, 1315449462, 2163365533, 3079323632, 
            2521042510, 2574302570, 2334414439, 1773342156, 3744680138, 3283363243, 1787479252, 2611378468, 3734374274, 3161323654, 
            2164074427, 674890201, 1191098699, 2508509402, 4230872366, 81862587, 3076967053, 81256123, 2541787010, 2609929742, 
            438558035, 2696673962, 856970680, 711794170, 782275745, 1370576245, 3231282030, 2186880074, 2826349884, 1941397434, 
            2025738401, 864964744, 780928136, 3876570220, 1841216372, 754297947, 1645430025, 4222009731, 1666949272, 3796717532, 
            445539729, 3622376858, 1762144415, 3786645965, 2289627783, 396518359, 1057367412, 1137137296, 207911077, 148643365, 
            117422031, 2146767446, 1350298717, 3099524417, 1124361302, 2494867906, 455255565, 1413022941, 880803032, 95729964, 
            195585369, 2536216349, 1551441948, 4238643046, 3027156742, 2134263273, 3940217811, 853380689, 4085944707, 1046387478, 
            52933477, 3713407574, 2063044342, 2965056661, 2386107772, 3822068295, 630620405, 1277222742, 179632467, 1746149464, 
            4178875527, 3011788444, 509032414, 3616064172, 2321925238, 411532152, 3217643121, 784694918, 2317830492, 2841165787, 
            1557597791, 1508080141, 3913201092, 2247387487, 1639262792, 600049505, 1061684808, 433073775, 3523190903, 3523430950, 
            2902879336, 893226225, 434990649, 3514254680, 1334580786, 2517582134, 3839977832, 2413276457, 2697267047, 1278207160, 
            2741661308, 2447778269, 428929721, 715775767, 3661647280, 2047375340, 3834857262, 2158390732, 1481874853, 1641887316, 
            520726390, 2893177174, 1745387464, 3773795083, 2995761783, 2378698145, 2786448879, 977184245, 4125996239, 948243158 ];

describe('LinearCongruentialGenerator', function() {

    it('generates pseudo-random numbers in the interval [0, 1)', function() {

        const lcg = new Pseudo.LinearCongruentialGenerator(Date.now());
        let pseudoRndNum = 0;

        for (let i = 0; i < 2000; i++) {
            pseudoRndNum = lcg.next();
            expect(pseudoRndNum).to.be.a('number');
            expect(pseudoRndNum).to.be.at.least(0);
            expect(pseudoRndNum).to.be.below(1);
        }

    });

});

describe('XorShift128', function() {

    it('generates pseudo-random numbers in the interval [0, 1)', function() {

        const xorShift = new Pseudo.XorShift128(Date.now());
        let pseudoRndNum = 0;

        for (let i = 0; i < 2000; i++) {
            pseudoRndNum = xorShift.next();
            expect(pseudoRndNum).to.be.a('number');
            expect(pseudoRndNum).to.be.at.least(0);
            expect(pseudoRndNum).to.be.below(1);
        }

    });

    it('agrees with the reference implementation', function() {

        const xorShift = new Pseudo.XorShift128(XOR_SHIFT_REFERENCE_SEED);

        XOR_SHIFT_REFERENCE_OUTPUT.forEach((referenceValue) => {
            expect(xorShift.next()).to.equal(referenceValue/TWO_TO_THIRTY_TWO);
        });

    });

});
